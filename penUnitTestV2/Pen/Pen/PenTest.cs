using NUnit.Framework;
using System;
using System.Linq;
using System.Diagnostics;
using System.IO;

namespace Pen
{
    public class PenTest
    {
        [Test]
        public void PenIsEmptyShouldReturnFalse()
        {
            //Arrange
            Pen pen = new Pen(0);

            //Act
            bool isWorking = pen.isWork();

            //Assert
            Assert.IsFalse(isWorking, "Pen is working");
        }

        [Test]
        public void PenIsEmptyWhenWriteShouldReturnEmptyString()
        {
            //Arrange
            Pen pen = new Pen(0, 1.0, "BLACK");
            string word = "Hello World!";

            //Act
            string line = pen.write(word);

            //Assert
            //for some reasom Assert does not contain definition IsNullOrEmpty
            Assert.IsEmpty(line, "String is not empty"); //used IsEmpty here since it works as needed
        }

        [Test]
        public void PenIsFullWhenWriteShouldReturnWord()
        {
            //Arrange
            Pen pen = new Pen(100, 1.0, "GOLD");
            string word = "Hello World!";

            //Act
            string line = pen.write(word);

            //Assert
            Assert.AreEqual(word, line, "expected word and printed one are not the same");
        }

        [Test]
        public void NotEnoughInkInPenShouldReturnPartOfWord()
        {
            //Arrange
            Pen pen = new Pen(5, 1.0);
            string word = "Hello World!";

            //Act
            string line = pen.write(word);

            //Assert
            Assert.AreEqual("Hello", line, "printed word is not \"Hello\"");
        }

        [Test]
        public void ReturnColorMethodWillFail()
        {
            //Arrange
            string color = "YELLOW";
            Pen pen = new Pen(100, 2.0, color);

            //Act
            string colorName = pen.getColor();

            //Assert
            Assert.AreEqual(color, colorName, "method did not return right color of pen");
        }

        [Test]
        public void ShouldReturnColor()
        {
            //Arrange
            string color = "GOLD"; //write any color here
            Pen pen = new Pen(100, 1.0, color);
            string path = @"D:\test.txt"; //path where file will be saved, YOU CAN WRITE PREFERED PATH

            //Act
            using (var tl = new TextWriterTraceListener(path))
            {
                Trace.Listeners.Add(tl);
                pen.doSomethingElse();
                Trace.Flush();
            }

            string[] lines = File.ReadAllLines(path).ToArray();

            //Assert
            Assert.AreEqual(color, lines[0], "returned pen color is NOT right");
        }
    }
    public class Pen
    {
        // сколько чернила в ручке
        private int inkContainerValue = 1000;
        // размер букв, которые пишутся ручкой
        private double sizeLetter = 1.0;
        // цвет ручки
        private String color = "BLUE";

        public Pen(int inkContainerValue)
        {
            this.inkContainerValue = inkContainerValue;
        }

        public Pen(int inkContainerValue, double sizeLetter)
            : this(inkContainerValue)
        {

            this.sizeLetter = sizeLetter;
        }

        public Pen(int inkContainerValue, double sizeLetter, String color)
            : this(inkContainerValue, sizeLetter)
        {

            this.color = color;
        }

        public String write(String word)
        {
            if (!isWork())
            {
                return "";
            }
            double sizeOfWord = word.Length * sizeLetter;
            if (sizeOfWord <= inkContainerValue)
            {
                double temp = inkContainerValue;
                temp -= sizeOfWord;
                inkContainerValue = Convert.ToInt32(temp);
                return word;
            }
            String partOfWord = word.Substring(0, inkContainerValue);
            inkContainerValue = 0;
            return partOfWord;
        }

        // ERROR!!! Bug
        public String getColor()
        {
            return "BLUE";
        }

        public Boolean isWork()
        {
            return inkContainerValue > 0;
        }

        public void doSomethingElse()
        {
            Debug.WriteLine(color);
        }

    }   
}